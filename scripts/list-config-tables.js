const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function listConfigTables() {
  console.log('üìä Listando tablas de configuraci√≥n en base de datos local...\n');

  try {
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n exitosa\n');

    // 1. Obtener todas las tablas
    console.log('1. Todas las tablas en la base de datos:');
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `;
    
    tables.forEach((table, index) => {
      console.log(`   ${index + 1}. ${table.table_name}`);
    });

    // 2. Identificar tablas de configuraci√≥n/referencia
    console.log('\n2. Tablas de configuraci√≥n/referencia identificadas:');
    
    const configTables = [
      'pagamento',
      'metodo_pagamento', 
      'servizio',
      'iata',
      'fermata_bus',
      'stato_bus'
    ];

    for (const tableName of configTables) {
      try {
        const count = await prisma.$queryRaw`SELECT COUNT(*) as count FROM ${tableName}`;
        console.log(`   ‚úÖ ${tableName}: ${count[0].count} registros`);
        
        // Mostrar algunos registros de ejemplo
        if (count[0].count > 0) {
          const sample = await prisma.$queryRaw`SELECT * FROM ${tableName} LIMIT 3`;
          console.log(`      Ejemplos:`, sample);
        }
      } catch (error) {
        console.log(`   ‚ùå ${tableName}: Error - ${error.message}`);
      }
    }

    // 3. Verificar tablas de plantillas
    console.log('\n3. Tablas de plantillas:');
    
    const templateTables = ['info', 'routes', 'stops'];
    
    for (const tableName of templateTables) {
      try {
        const count = await prisma.$queryRaw`SELECT COUNT(*) as count FROM ${tableName}`;
        console.log(`   ‚úÖ ${tableName}: ${count[0].count} registros`);
      } catch (error) {
        console.log(`   ‚ùå ${tableName}: Error - ${error.message}`);
      }
    }

    // 4. Verificar usuarios
    console.log('\n4. Usuarios:');
    try {
      const users = await prisma.user.findMany({
        select: {
          email: true,
          role: true,
          isActive: true
        }
      });
      console.log(`   üë• Total usuarios: ${users.length}`);
      users.forEach(user => {
        console.log(`      ‚Ä¢ ${user.email} (${user.role}) - Activo: ${user.isActive}`);
      });
    } catch (error) {
      console.log(`   ‚ùå Error verificando usuarios: ${error.message}`);
    }

    // 5. Resumen de tablas de configuraci√≥n
    console.log('\nüìã RESUMEN DE TABLAS DE CONFIGURACI√ìN:');
    console.log('   üîß Datos de referencia:');
    console.log('      ‚Ä¢ pagamento - Tipos de pago');
    console.log('      ‚Ä¢ metodo_pagamento - M√©todos de pago');
    console.log('      ‚Ä¢ servizio - Servicios disponibles');
    console.log('      ‚Ä¢ iata - C√≥digos de aeropuertos');
    console.log('      ‚Ä¢ fermata_bus - Paradas de autob√∫s');
    console.log('      ‚Ä¢ stato_bus - Estados de autob√∫s');
    console.log('   üìÑ Plantillas:');
    console.log('      ‚Ä¢ info - Plantillas de informaci√≥n');
    console.log('      ‚Ä¢ routes - Plantillas de rutas');
    console.log('      ‚Ä¢ stops - Plantillas de paradas');
    console.log('   üë• Usuarios:');
    console.log('      ‚Ä¢ user - Usuarios del sistema');

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

listConfigTables();
