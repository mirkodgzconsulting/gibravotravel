const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * SCRIPT PARA RESTAURAR CONFIGURACI√ìN EXACTA
 * 
 * Este script restaura los datos de configuraci√≥n EXACTAMENTE como los ten√≠as.
 */

async function restoreExactConfig() {
  console.log('üîÑ RESTAURANDO CONFIGURACI√ìN EXACTA...\n');
  
  try {
    // ========================================
    // LIMPIAR DATOS ACTUALES DE CONFIGURACI√ìN
    // ========================================
    console.log('üßπ Limpiando configuraci√≥n actual...');
    await prisma.metodoPagamento.deleteMany();
    await prisma.iata.deleteMany();
    await prisma.pagamento.deleteMany();
    console.log('   ‚úÖ Configuraci√≥n actual eliminada\n');

    // ========================================
    // RESTAURAR METODO PAGAMENTO (M√©todos de pago)
    // ========================================
    console.log('üí≥ Restaurando m√©todos de pago...');
    const metodiPagamentoData = [
      'Bonifico',
      'Cash',
      'Pos',
      'Klarna',
      'Compas',
      'Link Pos',
      'Postepay',
      'Western conto',
      'Ria',
      'Western nome'
    ];

    for (const metodoPagamento of metodiPagamentoData) {
      await prisma.metodoPagamento.create({
        data: { metodoPagamento }
      });
      console.log(`   ‚úÖ ${metodoPagamento}`);
    }

    // ========================================
    // RESTAURAR IATA (C√≥digos IATA)
    // ========================================
    console.log('\n‚úàÔ∏è  Restaurando c√≥digos IATA...');
    const iataData = [
      'Suema',
      'Kkm',
      'Ugotto',
      'Ryanair',
      'easyJet',
      'Wizz Air',
      'Vueling',
      'Volotea',
      'Eurowings',
      'Transavia',
      'Air Arabia',
      'Air cairo',
      'Egyptair',
      'Costa',
      'Msc',
      'Trenitalia',
      'Booking',
      'Flixbus',
      'Turkish'
    ];

    for (const iata of iataData) {
      await prisma.iata.create({
        data: { iata }
      });
      console.log(`   ‚úÖ ${iata}`);
    }

    // ========================================
    // RESTAURAR PAGAMENTO (Estados de pago)
    // ========================================
    console.log('\nüí∞ Restaurando estados de pago...');
    const pagamentiData = [
      'Ricevuto',
      'Acconto',
      'Acconto V',
      'Verificato'
    ];

    for (const pagamento of pagamentiData) {
      await prisma.pagamento.create({
        data: { pagamento }
      });
      console.log(`   ‚úÖ ${pagamento}`);
    }

    // ========================================
    // RESUMEN FINAL
    // ========================================
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ CONFIGURACI√ìN EXACTA RESTAURADA');
    console.log('='.repeat(60));

    const stats = {
      metodosPagamento: await prisma.metodoPagamento.count(),
      iatas: await prisma.iata.count(),
      pagamenti: await prisma.pagamento.count(),
      servicios: await prisma.servizio.count(),
      fermate: await prisma.fermataBus.count(),
      stati: await prisma.statoBus.count(),
    };

    console.log('\nüìä RESUMEN DE CONFIGURACI√ìN:');
    console.log('‚îÄ'.repeat(60));
    console.log(`üí≥ M√©todos de pago:        ${stats.metodosPagamento}`);
    console.log(`   Bonifico, Cash, Pos, Klarna, Compas, Link Pos,`);
    console.log(`   Postepay, Western conto, Ria, Western nome`);
    
    console.log(`\n‚úàÔ∏è  C√≥digos IATA:           ${stats.iatas}`);
    console.log(`   Suema, Kkm, Ugotto, Ryanair, easyJet, Wizz Air,`);
    console.log(`   Vueling, Volotea, Eurowings, Transavia, Air Arabia,`);
    console.log(`   Air cairo, Egyptair, Costa, Msc, Trenitalia,`);
    console.log(`   Booking, Flixbus, Turkish`);
    
    console.log(`\nüí∞ Estados de pago:        ${stats.pagamenti}`);
    console.log(`   Ricevuto, Acconto, Acconto V, Verificato`);
    
    console.log(`\nüé´ Servicios:              ${stats.servicios}`);
    console.log(`   (Sin cambios - mantenidos como estaban)`);
    
    console.log(`\nüöè Paradas de bus:         ${stats.fermate}`);
    console.log(`   (Sin cambios - mantenidas como estaban)`);
    
    console.log(`\nüìä Estados de bus:         ${stats.stati}`);
    console.log(`   (Sin cambios - mantenidos como estaban)`);
    console.log('‚îÄ'.repeat(60));

    console.log('\n‚úÖ ¬°Configuraci√≥n restaurada EXACTAMENTE como la ten√≠as!');
    console.log('   Todos los datos coinciden con tu configuraci√≥n original.');

  } catch (error) {
    console.error('\n‚ùå ERROR DURANTE LA RESTAURACI√ìN:');
    console.error(error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar restauraci√≥n
restoreExactConfig()
  .then(() => {
    console.log('\n‚úÖ Script finalizado exitosamente');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Script finalizado con errores');
    console.error(error);
    process.exit(1);
  });



