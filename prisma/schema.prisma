generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  TI
}

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique
  email       String   @unique
  firstName   String?
  lastName    String?
  phoneNumber String?
  photo       String?
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  travelNoteTemplates TravelNoteTemplate[]
  clients            Client[]

  @@map("users")
}

model Departure {
  id            String    @id @default(cuid())
  title         String
  description   String?
  departureDate DateTime
  returnDate    DateTime?
  price         Float?
  capacity      Int?
  available     Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("departures")
}

// Modelo para plantillas de notas de viaje
model TravelNoteTemplate {
  id              String   @id @default(cuid())
  title           String   // Título del tour
  textContent     String   // Plantilla de texto
  acc             String?  // Campo ACC
  coverImage      String?  // URL del archivo (Vercel Blob o ruta local)
  coverImageName  String?  // Nombre original del archivo de imagen
  pdfFile         String?  // URL del archivo (Vercel Blob o ruta local)
  pdfFileName     String?  // Nombre original del archivo PDF
  tourDate        DateTime // Fecha del tour
  travelCost      Float?   // Costo del viaje
  createdBy       String   // ID del usuario que creó la plantilla
  isDeleted       Boolean  @default(false) // Para papelera
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relación con el usuario que creó la plantilla
  creator User @relation(fields: [createdBy], references: [clerkId])

  @@map("travel_note_templates")
}

model Info {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("info")
}

model Route {
  id          String      @id @default(cuid())
  name        String
  description String?
  distance    Float?
  duration    Int?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  stops       RouteStop[]

  @@map("routes")
}

model Stop {
  id         String      @id @default(cuid())
  name       String
  address    String?
  latitude   Float?
  longitude  Float?
  active     Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  routeStops RouteStop[]

  @@map("stops")
}

model RouteStop {
  id      String @id @default(cuid())
  routeId String
  stopId  String
  order   Int    // orden de la parada en la ruta
  
  route Route @relation(fields: [routeId], references: [id], onDelete: Cascade)
  stop  Stop  @relation(fields: [stopId], references: [id], onDelete: Cascade)

  @@unique([routeId, stopId])
  @@map("route_stops")
}

// Modelo para clientes
model Client {
  id              String   @id @default(cuid())
  firstName       String   // Nome
  lastName        String   // Cognome
  fiscalCode      String   // Codice Fiscale
  address         String   // Indirizzo
  phoneNumber     String   // Telefono
  email           String   @unique
  birthPlace      String   // Nato a
  birthDate       DateTime // Data di nascita
  documents       String?  // Documenti (URLs o paths)
  isActive        Boolean  @default(true)
  createdBy       String   // ID del usuario que creó el cliente
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relación con el usuario que creó el cliente
  creator User @relation(fields: [createdBy], references: [clerkId])

  @@map("clients")
}

// Tablas de referencia/catálogo

model Pagamento {
  id         String   @id @default(cuid())
  pagamento  String   @unique // Tipo de pago: acconto, acconto ricevuto, verificare, ricevuto, da pagare
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("pagamento")
}

model Iata {
  id         String   @id @default(cuid())
  iata       String   @unique // Aerolínea: suema, ryan air, flight genius, kkm, safer, booking
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("iata")
}

model Servizio {
  id         String   @id @default(cuid())
  servizio   String   @unique // Servicio: biglietto, express, hotel, bagaglio, cambio data, polizza, lettera di invito
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("servizio")
}

model MetodoPagamento {
  id                 String   @id @default(cuid())
  metodoPagamento    String   @unique // Método: cash, PostePay, bonifico, POS, Western, RIA
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("metodo_pagamento")
}

model Origine {
  id         String   @id @default(cuid())
  origine    String   @unique // Origen: WhatsApp, Facebook, Cliente, Passaparola
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("origine")
}

// Tabla para gestión de boletos/tickets de viaje
model Biglietteria {
  id                String   @id @default(cuid())
  pagamento         String   // Tipo de pago (referencia a tabla Pagamento)
  data              DateTime // Fecha de la transacción
  iata              String   // Aerolínea (referencia a tabla Iata)
  pnr               String?  // Código PNR del vuelo
  passeggero        String   // Nombre del pasajero
  itinerario        String   // Ruta del viaje
  servizio          String   // Servicio (referencia a tabla Servizio)
  neto              Float    // Precio neto
  venduto           Float    // Precio vendido
  acconto           Float    // Monto del anticipo
  daPagare          Float    // Monto pendiente de pago
  metodoPagamento   String   // Método de pago (referencia a tabla MetodoPagamento)
  feeAgv            Float    // Fee de la agencia
  origine           String   // Origen del cliente (referencia a tabla Origine)
  cliente           String   // Nombre del cliente
  codiceFiscale     String   // Código fiscal del cliente
  indirizzo         String   // Dirección del cliente
  email             String   // Email del cliente
  numeroTelefono    String   // Número de teléfono del cliente
  creadoPor         String   // Nombre de la persona que creó el registro
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("biglietteria")
}
