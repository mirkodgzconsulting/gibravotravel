const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function diagnoseProductionErrors() {
  console.log('üîç Diagnosticando errores espec√≠ficos de producci√≥n...\n');

  try {
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n exitosa\n');

    // 1. Verificar configuraci√≥n de Cloudinary
    console.log('1. Verificando configuraci√≥n de Cloudinary...');
    const cloudinaryConfig = {
      CLOUDINARY_CLOUD_NAME: process.env.CLOUDINARY_CLOUD_NAME ? 'Configurado' : 'No configurado',
      CLOUDINARY_API_KEY: process.env.CLOUDINARY_API_KEY ? 'Configurado' : 'No configurado',
      CLOUDINARY_API_SECRET: process.env.CLOUDINARY_API_SECRET ? 'Configurado' : 'No configurado'
    };
    
    console.log('üìä Variables de Cloudinary:');
    Object.entries(cloudinaryConfig).forEach(([key, value]) => {
      console.log(`   ‚Ä¢ ${key}: ${value}`);
    });

    // 2. Verificar configuraci√≥n de Puppeteer (para generaci√≥n de PDFs)
    console.log('\n2. Verificando configuraci√≥n de Puppeteer...');
    try {
      const puppeteer = require('puppeteer');
      console.log('   ‚úÖ Puppeteer instalado');
    } catch (error) {
      console.log('   ‚ùå Puppeteer no instalado:', error.message);
    }

    // 3. Verificar directorios de uploads
    console.log('\n3. Verificando directorios de uploads...');
    const uploadDirs = [
      'public/uploads',
      'public/uploads/templates',
      'public/uploads/users'
    ];

    for (const dir of uploadDirs) {
      if (fs.existsSync(dir)) {
        console.log(`   ‚úÖ ${dir}: Existe`);
      } else {
        console.log(`   ‚ùå ${dir}: No existe`);
        try {
          fs.mkdirSync(dir, { recursive: true });
          console.log(`   ‚úÖ ${dir}: Creado`);
        } catch (error) {
          console.log(`   ‚ùå ${dir}: Error creando - ${error.message}`);
        }
      }
    }

    // 4. Verificar datos de Biglietteria (para generaci√≥n de recibos)
    console.log('\n4. Verificando datos de Biglietteria...');
    try {
      const biglietteria = await prisma.biglietteria.findMany({
        take: 3,
        select: {
          id: true,
          pnr: true,
          passeggero: true,
          itinerario: true,
          metodoPagamento: true,
          createdBy: true
        }
      });
      
      console.log(`   üìä Registros de Biglietteria: ${biglietteria.length}`);
      if (biglietteria.length > 0) {
        console.log('   üìã Ejemplos:');
        biglietteria.forEach((record, index) => {
          console.log(`      ${index + 1}. PNR: ${record.pnr}, Passeggero: ${record.passeggero}`);
        });
      } else {
        console.log('   ‚ö†Ô∏è  No hay registros de Biglietteria para generar recibos');
      }
    } catch (error) {
      console.log(`   ‚ùå Error verificando Biglietteria: ${error.message}`);
    }

    // 5. Verificar datos de TourAereo (para subida de archivos)
    console.log('\n5. Verificando datos de TourAereo...');
    try {
      const tourAereo = await prisma.tourAereo.findMany({
        take: 3,
        select: {
          id: true,
          titulo: true,
          coverImage: true,
          pdfFile: true,
          createdBy: true
        }
      });
      
      console.log(`   üìä Registros de TourAereo: ${tourAereo.length}`);
      if (tourAereo.length > 0) {
        console.log('   üìã Ejemplos:');
        tourAereo.forEach((tour, index) => {
          console.log(`      ${index + 1}. T√≠tulo: ${tour.titulo}`);
          console.log(`         Cover Image: ${tour.coverImage ? 'S√≠' : 'No'}`);
          console.log(`         PDF File: ${tour.pdfFile ? 'S√≠' : 'No'}`);
        });
      }
    } catch (error) {
      console.log(`   ‚ùå Error verificando TourAereo: ${error.message}`);
    }

    // 6. Verificar permisos de archivos
    console.log('\n6. Verificando permisos de archivos...');
    try {
      const testFile = 'public/uploads/test-permissions.txt';
      fs.writeFileSync(testFile, 'test');
      fs.unlinkSync(testFile);
      console.log('   ‚úÖ Permisos de escritura: OK');
    } catch (error) {
      console.log(`   ‚ùå Permisos de escritura: Error - ${error.message}`);
    }

    // 7. Verificar configuraci√≥n de Next.js
    console.log('\n7. Verificando configuraci√≥n de Next.js...');
    try {
      const nextConfig = require('./next.config.ts');
      console.log('   ‚úÖ next.config.ts: Cargado');
      
      if (nextConfig.images && nextConfig.images.remotePatterns) {
        console.log('   ‚úÖ Configuraci√≥n de im√°genes: OK');
        console.log(`      Patrones remotos: ${nextConfig.images.remotePatterns.length}`);
      } else {
        console.log('   ‚ö†Ô∏è  Configuraci√≥n de im√°genes: No encontrada');
      }
    } catch (error) {
      console.log(`   ‚ùå Error cargando next.config.ts: ${error.message}`);
    }

    // 8. Verificar variables de entorno cr√≠ticas
    console.log('\n8. Verificando variables de entorno cr√≠ticas...');
    const criticalEnvVars = [
      'DATABASE_URL',
      'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY',
      'CLERK_SECRET_KEY',
      'NEXTAUTH_SECRET',
      'NEXTAUTH_URL'
    ];

    criticalEnvVars.forEach(varName => {
      const value = process.env[varName];
      if (value) {
        console.log(`   ‚úÖ ${varName}: Configurado`);
      } else {
        console.log(`   ‚ùå ${varName}: No configurado`);
      }
    });

    console.log('\nüìã RESUMEN DE DIAGN√ìSTICO:');
    console.log('   üîß Para "Error generating document":');
    console.log('      ‚Ä¢ Verificar configuraci√≥n de Puppeteer');
    console.log('      ‚Ä¢ Verificar datos de Biglietteria');
    console.log('      ‚Ä¢ Verificar permisos de archivos');
    console.log('   üìÅ Para "Error de conexi√≥n" en archivos:');
    console.log('      ‚Ä¢ Verificar configuraci√≥n de Cloudinary');
    console.log('      ‚Ä¢ Verificar directorios de uploads');
    console.log('      ‚Ä¢ Verificar permisos de escritura');

  } catch (error) {
    console.error('‚ùå Error durante diagn√≥stico:', error);
  } finally {
    await prisma.$disconnect();
  }
}

diagnoseProductionErrors();
