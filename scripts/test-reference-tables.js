const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient();

async function testReferenceTables() {
  try {
    console.log('üß™ Iniciando pruebas de tablas de referencia...');

    // Probar tabla Pagamento
    console.log('\nüìã Probando tabla Pagamento...');
    const pagamenti = await prisma.pagamento.findMany();
    console.log(`‚úÖ Encontrados ${pagamenti.length} tipos de pago:`);
    pagamenti.forEach(p => console.log(`   - ${p.pagamento}`));

    // Probar tabla Iata
    console.log('\n‚úàÔ∏è Probando tabla Iata...');
    const iata = await prisma.iata.findMany();
    console.log(`‚úÖ Encontradas ${iata.length} aerol√≠neas:`);
    iata.forEach(i => console.log(`   - ${i.iata}`));

    // Probar tabla Servizio
    console.log('\nüõ†Ô∏è Probando tabla Servizio...');
    const servizi = await prisma.servizio.findMany();
    console.log(`‚úÖ Encontrados ${servizi.length} servicios:`);
    servizi.forEach(s => console.log(`   - ${s.servizio}`));

    // Probar tabla MetodoPagamento
    console.log('\nüí≥ Probando tabla MetodoPagamento...');
    const metodiPagamento = await prisma.metodoPagamento.findMany();
    console.log(`‚úÖ Encontrados ${metodiPagamento.length} m√©todos de pago:`);
    metodiPagamento.forEach(m => console.log(`   - ${m.metodoPagamento}`));

    // Probar tabla Origine
    console.log('\nüìç Probando tabla Origine...');
    const origini = await prisma.origine.findMany();
    console.log(`‚úÖ Encontradas ${origini.length} fuentes de origen:`);
    origini.forEach(o => console.log(`   - ${o.origine}`));

    // Probar operaciones CRUD b√°sicas
    console.log('\nüîß Probando operaciones CRUD...');
    
    // Crear un registro temporal
    const tempPagamento = await prisma.pagamento.create({
      data: { pagamento: 'test_pagamento_temp' }
    });
    console.log('‚úÖ Crear: Registro temporal creado');

    // Leer el registro
    const foundPagamento = await prisma.pagamento.findUnique({
      where: { id: tempPagamento.id }
    });
    console.log('‚úÖ Leer: Registro encontrado');

    // Actualizar el registro
    await prisma.pagamento.update({
      where: { id: tempPagamento.id },
      data: { pagamento: 'test_pagamento_actualizado' }
    });
    console.log('‚úÖ Actualizar: Registro actualizado');

    // Eliminar el registro temporal
    await prisma.pagamento.delete({
      where: { id: tempPagamento.id }
    });
    console.log('‚úÖ Eliminar: Registro temporal eliminado');

    console.log('\nüéâ Todas las pruebas completadas exitosamente!');

  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar las pruebas
testReferenceTables()
  .then(() => {
    console.log('‚úÖ Pruebas completadas');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error en las pruebas:', error);
    process.exit(1);
  });
