const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function listConfigTables() {
  console.log('üìä Listando tablas de configuraci√≥n en base de datos local...\n');

  try {
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n exitosa\n');

    // 1. Verificar tablas de configuraci√≥n/referencia usando Prisma
    console.log('1. Tablas de configuraci√≥n/referencia:');
    
    // Pagamento
    try {
      const pagamento = await prisma.pagamento.findMany();
      console.log(`   ‚úÖ pagamento: ${pagamento.length} registros`);
      if (pagamento.length > 0) {
        console.log(`      Ejemplos: ${pagamento.slice(0, 3).map(p => p.pagamento).join(', ')}`);
      }
    } catch (error) {
      console.log(`   ‚ùå pagamento: Error - ${error.message}`);
    }

    // MetodoPagamento
    try {
      const metodoPagamento = await prisma.metodoPagamento.findMany();
      console.log(`   ‚úÖ metodoPagamento: ${metodoPagamento.length} registros`);
      if (metodoPagamento.length > 0) {
        console.log(`      Ejemplos: ${metodoPagamento.slice(0, 3).map(m => m.metodoPagamento).join(', ')}`);
      }
    } catch (error) {
      console.log(`   ‚ùå metodoPagamento: Error - ${error.message}`);
    }

    // Servizio
    try {
      const servizio = await prisma.servizio.findMany();
      console.log(`   ‚úÖ servizio: ${servizio.length} registros`);
      if (servizio.length > 0) {
        console.log(`      Ejemplos: ${servizio.slice(0, 3).map(s => s.servizio).join(', ')}`);
      }
    } catch (error) {
      console.log(`   ‚ùå servizio: Error - ${error.message}`);
    }

    // Iata
    try {
      const iata = await prisma.iata.findMany();
      console.log(`   ‚úÖ iata: ${iata.length} registros`);
      if (iata.length > 0) {
        console.log(`      Ejemplos: ${iata.slice(0, 3).map(i => i.iata).join(', ')}`);
      }
    } catch (error) {
      console.log(`   ‚ùå iata: Error - ${error.message}`);
    }

    // FermataBus
    try {
      const fermataBus = await prisma.fermataBus.findMany();
      console.log(`   ‚úÖ fermataBus: ${fermataBus.length} registros`);
      if (fermataBus.length > 0) {
        console.log(`      Ejemplos: ${fermataBus.slice(0, 3).map(f => f.fermata).join(', ')}`);
      }
    } catch (error) {
      console.log(`   ‚ùå fermataBus: Error - ${error.message}`);
    }

    // StatoBus
    try {
      const statoBus = await prisma.statoBus.findMany();
      console.log(`   ‚úÖ statoBus: ${statoBus.length} registros`);
      if (statoBus.length > 0) {
        console.log(`      Ejemplos: ${statoBus.slice(0, 3).map(s => s.stato).join(', ')}`);
      }
    } catch (error) {
      console.log(`   ‚ùå statoBus: Error - ${error.message}`);
    }

    // 2. Verificar tablas de plantillas
    console.log('\n2. Tablas de plantillas:');
    
    // Info
    try {
      const info = await prisma.info.findMany();
      console.log(`   ‚úÖ info: ${info.length} registros`);
      if (info.length > 0) {
        console.log(`      Ejemplos: ${info.slice(0, 3).map(i => i.title).join(', ')}`);
      }
    } catch (error) {
      console.log(`   ‚ùå info: Error - ${error.message}`);
    }

    // Routes
    try {
      const routes = await prisma.route.findMany();
      console.log(`   ‚úÖ routes: ${routes.length} registros`);
      if (routes.length > 0) {
        console.log(`      Ejemplos: ${routes.slice(0, 3).map(r => r.title).join(', ')}`);
      }
    } catch (error) {
      console.log(`   ‚ùå routes: Error - ${error.message}`);
    }

    // Stops
    try {
      const stops = await prisma.stop.findMany();
      console.log(`   ‚úÖ stops: ${stops.length} registros`);
      if (stops.length > 0) {
        console.log(`      Ejemplos: ${stops.slice(0, 3).map(s => s.title).join(', ')}`);
      }
    } catch (error) {
      console.log(`   ‚ùå stops: Error - ${error.message}`);
    }

    // 3. Verificar usuarios
    console.log('\n3. Usuarios:');
    try {
      const users = await prisma.user.findMany({
        select: {
          email: true,
          role: true,
          isActive: true
        }
      });
      console.log(`   üë• Total usuarios: ${users.length}`);
      users.forEach(user => {
        console.log(`      ‚Ä¢ ${user.email} (${user.role}) - Activo: ${user.isActive}`);
      });
    } catch (error) {
      console.log(`   ‚ùå Error verificando usuarios: ${error.message}`);
    }

    // 4. Verificar clientes
    console.log('\n4. Clientes:');
    try {
      const clients = await prisma.client.findMany();
      console.log(`   üë• Total clientes: ${clients.length}`);
      if (clients.length > 0) {
        console.log(`      Ejemplos: ${clients.slice(0, 3).map(c => c.nombre).join(', ')}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error verificando clientes: ${error.message}`);
    }

    // 5. Resumen
    console.log('\nüìã RESUMEN DE TABLAS DE CONFIGURACI√ìN:');
    console.log('   üîß Datos de referencia (necesarios para formularios):');
    console.log('      ‚Ä¢ pagamento - Tipos de pago');
    console.log('      ‚Ä¢ metodoPagamento - M√©todos de pago');
    console.log('      ‚Ä¢ servizio - Servicios disponibles');
    console.log('      ‚Ä¢ iata - C√≥digos de aeropuertos');
    console.log('      ‚Ä¢ fermataBus - Paradas de autob√∫s');
    console.log('      ‚Ä¢ statoBus - Estados de autob√∫s');
    console.log('   üìÑ Plantillas (para generar documentos):');
    console.log('      ‚Ä¢ info - Plantillas de informaci√≥n');
    console.log('      ‚Ä¢ routes - Plantillas de rutas');
    console.log('      ‚Ä¢ stops - Plantillas de paradas');
    console.log('   üë• Usuarios y datos:');
    console.log('      ‚Ä¢ user - Usuarios del sistema');
    console.log('      ‚Ä¢ client - Clientes registrados');

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

listConfigTables();
