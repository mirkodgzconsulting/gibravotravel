generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  clerkId           String           @unique
  email             String           @unique
  firstName         String?
  lastName          String?
  phoneNumber       String?
  photo             String?
  role              UserRole         @default(USER)
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  agendasPersonales AgendaPersonal[]
  biglietteria      Biglietteria[]
  clients           Client[]
  infoTemplates     Info[]
  notificaciones    Notificacion[]
  routes            Route[]
  stops             Stop[]
  tourAereos        TourAereo[]
  tourBuses         TourBus[]
  ventasTourAereo   VentaTourAereo[]
  ventasTourBus     VentaTourBus[]

  @@index([email], map: "idx_users_email")
  @@index([role], map: "idx_users_role")
  @@map("users")
}

model Departure {
  id            String    @id @default(cuid())
  title         String
  description   String?
  departureDate DateTime
  returnDate    DateTime?
  price         Float?
  capacity      Int?
  available     Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("departures")
}

model Info {
  id             String   @id @default(cuid())
  title          String
  textContent    String
  coverImage     String?
  coverImageName String?
  pdfFile        String?
  pdfFileName    String?
  createdBy      String
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  creator        User     @relation(fields: [createdBy], references: [clerkId])

  @@map("info")
}

model Route {
  id             String   @id @default(cuid())
  title          String
  textContent    String
  coverImage     String?
  coverImageName String?
  pdfFile        String?
  pdfFileName    String?
  createdBy      String
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  creator        User     @relation(fields: [createdBy], references: [clerkId])

  @@map("routes")
}

model Stop {
  id             String   @id @default(cuid())
  title          String
  textContent    String
  coverImage     String?
  coverImageName String?
  pdfFile        String?
  pdfFileName    String?
  createdBy      String
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  creator        User     @relation(fields: [createdBy], references: [clerkId])

  @@map("stops")
}

model Client {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  fiscalCode    String
  address       String
  phoneNumber   String
  email         String   @unique
  birthPlace    String
  birthDate     DateTime
  document1     String?
  document1Name String?
  document2     String?
  document2Name String?
  document3     String?
  document3Name String?
  document4     String?
  document4Name String?
  isActive      Boolean  @default(true)
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  creator       User     @relation(fields: [createdBy], references: [clerkId])

  @@map("clients")
}

model Pagamento {
  id        String   @id @default(cuid())
  pagamento String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pagamento")
}

model Iata {
  id        String   @id @default(cuid())
  iata      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("iata")
}

model Servizio {
  id        String   @id @default(cuid())
  servizio  String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("servizio")
}

model MetodoPagamento {
  id              String   @id @default(cuid())
  metodoPagamento String   @unique
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("metodo_pagamento")
}

model Biglietteria {
  id               String                 @id @default(cuid())
  pagamento        String
  data             DateTime
  pnr              String?
  itinerario       String
  metodoPagamento  String
  cliente          String
  codiceFiscale    String
  indirizzo        String
  email            String
  numeroTelefono   String
  creadoPor        String
  isActive         Boolean                @default(true)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  netoPrincipal    Float                  @default(0)
  vendutoTotal     Float                  @default(0)
  acconto          Float                  @default(0)
  daPagare         Float                  @default(0)
  feeAgv           Float                  @default(0)
  attachedFile     String?
  attachedFileName String?
  numeroCuotas     Int?
  numeroPasajeros  Int                    @default(1)
  creator          User                   @relation(fields: [creadoPor], references: [id])
  cuotas           Cuota[]
  pasajeros        PasajeroBiglietteria[]

  @@index([cliente], map: "idx_biglietteria_cliente")
  @@index([createdAt], map: "idx_biglietteria_created_at")
  @@index([data], map: "idx_biglietteria_data")
  @@map("biglietteria")
}

model PasajeroBiglietteria {
  id                   String       @id @default(cuid())
  biglietteriaId       String
  nombrePasajero       String
  servizio             String
  andata               DateTime?
  ritorno              DateTime?
  iata                 String?
  netoBiglietteria     Float?
  vendutoBiglietteria  Float?
  tieneExpress         Boolean?     @default(false)
  netoExpress          Float?
  vendutoExpress       Float?
  tienePolizza         Boolean?     @default(false)
  netoPolizza          Float?
  vendutoPolizza       Float?
  tieneLetteraInvito   Boolean?     @default(false)
  netoLetteraInvito    Float?
  vendutoLetteraInvito Float?
  tieneHotel           Boolean?     @default(false)
  netoHotel            Float?
  vendutoHotel         Float?
  estado               String       @default("Pendiente")
  fechaPago            DateTime?
  fechaActivacion      DateTime?
  notas                String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  biglietteria         Biglietteria @relation(fields: [biglietteriaId], references: [id], onDelete: Cascade)

  @@index([estado], map: "idx_pasajeros_biglietteria_estado")
  @@map("pasajeros_biglietteria")
}

model Cuota {
  id               String       @id @default(cuid())
  biglietteriaId   String
  numeroCuota      Int
  data             DateTime?
  prezzo           Float
  note             String?
  isPagato         Boolean      @default(false)
  attachedFile     String?
  attachedFileName String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  biglietteria     Biglietteria @relation(fields: [biglietteriaId], references: [id], onDelete: Cascade)

  @@index([isPagato], map: "idx_cuotas_is_pagato")
  @@map("cuotas")
}

model TourBus {
  id               String         @id @default(cuid())
  titulo           String
  precioAdulto     Float          @default(0)
  precioNino       Float          @default(0)
  cantidadAsientos Int            @default(53)
  fechaCreacion    DateTime       @default(now())
  fechaViaje       DateTime?
  fechaFin         DateTime?
  acc              String?
  bus              Float?
  pasti            Float?
  parking          Float?
  coordinatore1    Float?
  coordinatore2    Float?
  ztl              Float?
  hotel            Float?
  polizza          Float?
  tkt              Float?
  autoservicio     String?
  feeAgv           Float          @default(0)
  coverImage       String?
  coverImageName   String?
  pdfFile          String?
  pdfFileName      String?
  descripcion      String?
  isActive         Boolean        @default(true)
  createdBy        String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  asientos         AsientoBus[]
  creator          User           @relation(fields: [createdBy], references: [clerkId])
  ventas           VentaAsiento[]
  ventasTourBus    VentaTourBus[]

  @@map("tour_bus")
}

model TourAereo {
  id               String           @id @default(cuid())
  titulo           String
  precioAdulto     Float            @default(0)
  precioNino       Float            @default(0)
  fechaViaje       DateTime?
  fechaFin         DateTime?
  meta             Int              @default(0)
  acc              String?
  guidaLocale      Float?
  coordinatore     Float?
  transporte       Float?
  notas            String?
  notasCoordinador String?
  feeAgv           Float            @default(0)
  coverImage       String?
  coverImageName   String?
  pdfFile          String?
  pdfFileName      String?
  descripcion      String?
  isActive         Boolean          @default(true)
  createdBy        String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  creator          User             @relation(fields: [createdBy], references: [clerkId])
  ventas           VentaTourAereo[]

  @@map("tour_aereo")
}

model AsientoBus {
  id              String      @id @default(cuid())
  tourBusId       String
  numeroAsiento   Int
  fila            Int
  columna         String
  tipo            TipoAsiento @default(NORMAL)
  isVendido       Boolean     @default(false)
  stato           String      @default("Libero")
  precioVenta     Float?
  fechaVenta      DateTime?
  clienteNombre   String?
  clienteTelefono String?
  clienteEmail    String?
  observaciones   String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tourBus         TourBus     @relation(fields: [tourBusId], references: [id], onDelete: Cascade)

  @@unique([tourBusId, numeroAsiento])
  @@index([stato], map: "idx_asientos_bus_estado")
  @@map("asientos_bus")
}

model VentaAsiento {
  id              String   @id @default(cuid())
  tourBusId       String
  numeroAsiento   Int
  clienteNombre   String
  clienteTelefono String?
  clienteEmail    String?
  precioVenta     Float
  fechaVenta      DateTime @default(now())
  metodoPago      String?
  observaciones   String?
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tourBus         TourBus  @relation(fields: [tourBusId], references: [id], onDelete: Cascade)

  @@map("ventas_asientos")
}

model VentaTourBus {
  id                 String               @id @default(cuid())
  tourBusId          String
  clienteId          String?
  clienteNombre      String
  codiceFiscale      String
  indirizzo          String
  email              String
  numeroTelefono     String
  fechaNacimiento    DateTime
  fermata            String
  numeroAsiento      Int
  tieneMascotas      Boolean              @default(false)
  numeroMascotas     Int?
  tieneInfantes      Boolean              @default(false)
  numeroInfantes     Int?
  totalAPagar        Float
  acconto            Float
  daPagare           Float
  metodoPagamento    String
  estadoPago         String
  numeroAcompanantes Int                  @default(0)
  numeroCuotas       Int?
  createdBy          String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  acompanantes       AcompananteTourBus[]
  cuotas             CuotaTourBus[]
  creator            User                 @relation(fields: [createdBy], references: [id])
  tourBus            TourBus              @relation(fields: [tourBusId], references: [id], onDelete: Cascade)

  @@index([createdAt], map: "idx_ventas_tour_bus_created_at")
  @@map("ventas_tour_bus")
}

model AcompananteTourBus {
  id             String       @id @default(cuid())
  ventaTourBusId String
  clienteId      String?
  nombreCompleto String
  telefono       String?
  codiceFiscale  String?
  esAdulto       Boolean      @default(true)
  fermata        String
  numeroAsiento  Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  ventaTourBus   VentaTourBus @relation(fields: [ventaTourBusId], references: [id], onDelete: Cascade)

  @@map("acompanantes_tour_bus")
}

model CuotaTourBus {
  id              String       @id @default(cuid())
  ventaTourBusId  String
  numeroCuota     Int
  fechaPago       DateTime?
  precioPagar     Float
  metodoPagamento String
  isPagado        Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  ventaTourBus    VentaTourBus @relation(fields: [ventaTourBusId], references: [id], onDelete: Cascade)

  @@map("cuotas_tour_bus")
}

model FermataBus {
  id        String   @id @default(cuid())
  fermata   String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fermata_bus")
}

model StatoBus {
  id        String   @id @default(cuid())
  stato     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stato_bus")
}

model VentaTourAereo {
  id               String                @id @default(cuid())
  tourAereoId      String
  clienteId        String?
  pasajero         String
  codiceFiscale    String
  indirizzo        String
  email            String
  numeroTelefono   String
  paisOrigen       String
  iata             String
  pnr              String?
  hotel            Float?
  transfer         Float?
  attachedFile     String?
  attachedFileName String?
  venduto          Float
  acconto          Float
  daPagare         Float
  metodoPagamento  String
  metodoCompra     String?
  stato            String
  createdBy        String
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  cuotas           CuotaVentaTourAereo[]
  creator          User                  @relation(fields: [createdBy], references: [id])
  tourAereo        TourAereo             @relation(fields: [tourAereoId], references: [id], onDelete: Cascade)

  @@index([createdAt], map: "idx_ventas_tour_aereo_created_at")
  @@map("ventas_tour_aereo")
}

model CuotaVentaTourAereo {
  id               String         @id @default(cuid())
  ventaTourAereoId String
  numeroCuota      Int
  fechaPago        DateTime
  monto            Float
  nota             String?
  estado           String         @default("Pendiente")
  attachedFile     String?
  attachedFileName String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  ventaTourAereo   VentaTourAereo @relation(fields: [ventaTourAereoId], references: [id], onDelete: Cascade)

  @@map("cuotas_venta_tour_aereo")
}

model AgendaPersonal {
  id             String              @id @default(cuid())
  titulo         String
  descripcion    String?
  fecha          DateTime
  tipo           AgendaTipo          @default(PERSONAL)
  color          String              @default("bg-purple-200 text-gray-800")
  isActive       Boolean             @default(true)
  createdBy      String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  visibilidad    VisibilidadAgenda   @default(PRIVADO)
  creator        User                @relation(fields: [createdBy], references: [id])
  notificaciones Notificacion[]
  recordatorio   RecordatorioAgenda?

  @@index([fecha], map: "idx_agendas_personales_fecha")
  @@index([tipo], map: "idx_agendas_personales_tipo")
  @@map("agendas_personales")
}

model RecordatorioAgenda {
  id        String         @id @default(cuid())
  agendaId  String         @unique
  isActivo  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  diasAntes Int            @default(0)
  agenda    AgendaPersonal @relation(fields: [agendaId], references: [id], onDelete: Cascade)

  @@map("recordatorios_agenda")
}

model Notificacion {
  id        String          @id @default(cuid())
  userId    String
  agendaId  String?
  mensaje   String
  tipo      String          @default("AGENDA")
  isLeida   Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  agenda    AgendaPersonal? @relation(fields: [agendaId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt], map: "idx_notificaciones_created_at")
  @@map("notificaciones")
}

enum TipoAsiento {
  NORMAL
  PREMIUM
  DISCAPACITADO
  CONDUCTOR
}

enum AgendaTipo {
  PERSONAL
  REUNION
  CITA
  RECORDATORIO
  TAREA
}

enum VisibilidadAgenda {
  PRIVADO
  PUBLICO
}

enum UserRole {
  USER
  ADMIN
  TI
}
